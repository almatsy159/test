# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DU-App_V1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


#from PyQt5 import QtCore  # , QtGui, QtWidgets

import PyQt5.QtWidgets as qtw
import PyQt5.QtGui as qtg
import PyQt5.QtCore as qtc
import os

class Ui_MainWindow():
    id=0
    def setupUi(self, MainWindow):

        #object_in_ui=[]
        #self.dictUI={"button":{},"textEdit":{}}
        self.my_dict={}
        self.list_of_type=[]
        self.textEdit_dict={}
        self.dict_of_dict={}
        #print(locals())

        # window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 635)
        MainWindow.setWindowTitle("Unik Doc App")


        # Layout (Vertical)
        #self.setLayout(qtw.QVBoxLayout())

        self.centralwidget = qtw.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        #print(locals())
        # tree
        self.treeWidget = qtw.QTreeWidget(self.centralwidget)
        self.treeWidget.setGeometry(qtc.QRect(10, 10, 256, 351))
        self.treeWidget.setObjectName("DU_View")

        # add items
        item_0 = qtw.QTreeWidgetItem(self.treeWidget)
        item_1 = qtw.QTreeWidgetItem(item_0)
        item_2 = qtw.QTreeWidgetItem(item_1)
        item_2 = qtw.QTreeWidgetItem(item_1)
        item_1 = qtw.QTreeWidgetItem(item_0)
        item_2 = qtw.QTreeWidgetItem(item_1)
        item_0 = qtw.QTreeWidgetItem(self.treeWidget)
        item_1 = qtw.QTreeWidgetItem(item_0)
        item_2 = qtw.QTreeWidgetItem(item_1)

        # liste
        self.listWidget = qtw.QListWidget(self.centralwidget)
        self.listWidget.setGeometry(qtc.QRect(580, 0, 221, 192))
        self.listWidget.setObjectName("listWidget")
        item = qtw.QListWidgetItem()
        self.listWidget.addItem(item)
        item = qtw.QListWidgetItem()
        self.listWidget.addItem(item)

        # Vim
        self.textEdit = qtw.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(qtc.QRect(290, 20, 261, 331))
        self.textEdit.setObjectName("textEdit")

        # Terminal
        self.textEdit_2 = qtw.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(qtc.QRect(20, 380, 431, 161))
        self.textEdit_2.setObjectName("textEdit_2")

        # Assistant
        self.textEdit_3 = qtw.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(qtc.QRect(470, 380, 311, 151))
        self.textEdit_3.setObjectName("textEdit_3")


        # Combo
        self.comboBox = qtw.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(qtc.QRect(20, 550, 79, 27))
        self.comboBox.setObjectName("comboBox")


        self.combobox_val=["1","2","3","4","5"]
        for i in self.combobox_val:
            self.set_cbb_val(self.comboBox,i)

        # Entry
        self.lineEdit = qtw.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(qtc.QRect(110, 550, 281, 27))
        self.lineEdit.setObjectName("lineEdit")

        lineEdit=qtw.QLineEdit(self.centralwidget)
        self.lineEdit2=lineEdit

        # Button
        self.pushButton = qtw.QPushButton("Enter",self.centralwidget,
                clicked= lambda: self.pressed_enter(self.textEdit,"ls","1"))
        self.pushButton.setGeometry(qtc.QRect(400, 550, 88, 27))
        self.pushButton.setObjectName("pushButton")

        # Scrolls
        self.verticalScrollBar = qtw.QScrollBar(self.centralwidget)
        self.verticalScrollBar.setGeometry(qtc.QRect(440, 380, 8, 160))
        self.verticalScrollBar.setOrientation(qtc.Qt.Vertical)
        self.verticalScrollBar.setObjectName("verticalScrollBar")

        self.verticalScrollBar_2 = qtw.QScrollBar(self.centralwidget)
        self.verticalScrollBar_2.setGeometry(qtc.QRect(760, 380, 8, 160))
        self.verticalScrollBar_2.setOrientation(qtc.Qt.Vertical)
        self.verticalScrollBar_2.setObjectName("verticalScrollBar_2")

        self.verticalScrollBar_3 = qtw.QScrollBar(self.centralwidget)
        self.verticalScrollBar_3.setGeometry(qtc.QRect(240, 50, 8, 160))
        self.verticalScrollBar_3.setOrientation(qtc.Qt.Vertical)
        self.verticalScrollBar_3.setObjectName("verticalScrollBar_3")

        # Helper
        self.textEdit_4 = qtw.QTextEdit(self.centralwidget,
                lineWrapMode=qtw.QTextEdit.FixedColumnWidth,
                lineWrapColumnOrWidth=150,
                placeholderText="start typing",
                readOnly=False)
        self.textEdit_4.setGeometry(qtc.QRect(580, 200, 201, 151))
        self.textEdit_4.setObjectName("textEdit_4")
        MainWindow.setCentralWidget(self.centralwidget)

        # Menu
        self.menubar = qtw.QMenuBar(MainWindow)
        self.menubar.setGeometry(qtc.QRect(0, 0, 800, 24))
        self.menubar.setObjectName("menubar")

        self.menuFile = qtw.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")

        self.menuSetting = qtw.QMenu(self.menubar)
        self.menuSetting.setObjectName("menuSetting")

        # Menu
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = qtw.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)
        self.actionNew_DU =qtw .QAction(MainWindow)
        self.actionNew_DU.setObjectName("actionNew_DU")

        self.actionNew_Doc = qtw.QAction(MainWindow)
        self.actionNew_Doc.setObjectName("actionNew_Doc")

        # Menu items
        self.menuFile.addAction(self.actionNew_DU)
        self.menuFile.addAction(self.actionNew_Doc)
        self.menuFile.addSeparator()
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuSetting.menuAction())

        #self.x=locals()
        #print(locals())
        #print(globals())
        self.dict_of_instance()
        #print(id(self.__dir__()[0]))
        #print(locals())
        #print(self.__dict__)
        #print("#### my dict :\n\t",self.my_dict)
        #print("#### my list : \n\t",self.list_of_type)
        #self.load_dict("dict",self.dict_of_dict)

        self.load_dict("PyQt5.QtWidgets.QTextEdit",self.textEdit_dict)

        print(type(self.textEdit_dict[1]).objectName)
        #print(help(qtw.QTextEdit))

    def set_cbb_val(seilf,cbb,val):
        cbb.addItem(val)
        #print(locals())

    def pressed_enter(self,field,cmd,num="1"):
        x=os.system(cmd)
        name = "textEdit_" + num
        #print(self.name)
        #print(type(self.name),self.name)
        field.setText(f'it sent to textbox {num} this command {cmd} and the result is :\n {x}')

    """
    def update_dictUI(self,type,id,object):
        self.dictUI[type][id]=object
        self.id += 1
    """
    def dict_of_instance(self):
        for i,j in self.__dict__.items():
            #print("type:",j,"value :",i)
            x=str(type[j])
            #x=x[8:-2]
            if type(j) not in self.list_of_type:
                self.list_of_type.append(type(j))
                self.my_dict[type(j)]={}
            """
            if x not in self.list_of_type:
                self.list_of_type.append(j)
                self.my_dict[x]={}
                """
            #print("type : ",type(i))
            #print("repr : ",i.__repr__())
            #print("my dict : ",self.my_dict)
            #print("len dict[type] : ",len(self.my_dict[type(i)]))
            self.my_dict[type(j)][str(i)] = j

    def load_dict(self,type_name,dict_to_load):

        dict_id=1
        name = "<class '"+type_name+"'>"
        #name= <class 'dict'>
        for i in self.list_of_type:
            if str(i) == name:
                print("Eureka")
                name = i
            else :
                #print(type(i),"!=",type(name))
                pass
        for i,j in self.my_dict[name].items():
            dict_to_load[dict_id]=j
            dict_id+=1
        """
        for i,j in self.my_dict.items():
            print(type(i),i.__text_signature__)
            print(type(j))
        """
        #print(dict_to_load)
if __name__ == "__main__":
    import sys

    app = qtw.QApplication(sys.argv)
    MainWindow = qtw.QMainWindow()

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    print(ui.textEdit.objectName())
    MainWindow.show()
    sys.exit(app.exec_())
